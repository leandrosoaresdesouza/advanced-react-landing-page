type AdminUser {
  id: ID!
  username: String
}

type Author {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  photo: UploadFile
  name: String!
  role: String!
  socialLinks: [ComponentPageSocialLinks]
  description: String!
  created_by: AdminUser
  updated_by: AdminUser
}

type AuthorAggregator {
  count: Int
  totalCount: Int
}

type AuthorConnection {
  values: [Author]
  groupBy: AuthorGroupBy
  aggregate: AuthorAggregator
}

type AuthorConnectionCreated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionCreated_by {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionDescription {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionId {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionName {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPhoto {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionRole {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionUpdated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionUpdated_by {
  key: ID
  connection: AuthorConnection
}

type AuthorGroupBy {
  id: [AuthorConnectionId]
  created_at: [AuthorConnectionCreated_at]
  updated_at: [AuthorConnectionUpdated_at]
  photo: [AuthorConnectionPhoto]
  name: [AuthorConnectionName]
  role: [AuthorConnectionRole]
  description: [AuthorConnectionDescription]
  created_by: [AuthorConnectionCreated_by]
  updated_by: [AuthorConnectionUpdated_by]
}

input AuthorInput {
  photo: ID
  name: String!
  role: String!
  socialLinks: [ComponentPageSocialLinkInput]
  description: String!
  created_by: ID
  updated_by: ID
}

type ComponentPageButton {
  id: ID!
  label: String!
  url: String!
}

input ComponentPageButtonInput {
  label: String
  url: String!
}

input ComponentPageConceptInput {
  title: String!
}

type ComponentPageConcepts {
  id: ID!
  title: String!
}

type ComponentPageHeader {
  id: ID!
  title: String!
  description: String!
  button: ComponentPageButton
  image: UploadFile
}

input ComponentPageHeaderInput {
  title: String!
  description: String!
  button: ComponentPageButtonInput
  image: ID
}

input ComponentPageModuleInput {
  title: String!
  subtitle: String!
  description: String!
}

type ComponentPageModules {
  id: ID!
  title: String!
  subtitle: String!
  description: String!
}

type ComponentPagePricingBox {
  id: ID!
  totalPrice: Int!
  numberInstallments: Int!
  priceInstallment: Int!
  benefits: String!
  button: ComponentPageButton
}

input ComponentPagePricingBoxInput {
  totalPrice: Int
  numberInstallments: Int!
  priceInstallment: Int!
  benefits: String
  button: ComponentPageButtonInput!
}

input ComponentPageQuestionInput {
  question: String!
  answer: String!
}

type ComponentPageQuestions {
  id: ID!
  question: String!
  answer: String!
}

input ComponentPageReviewInput {
  name: String!
  text: String!
  photo: ID
}

type ComponentPageReviews {
  id: ID!
  name: String!
  text: String!
  photo: UploadFile
}

type ComponentPageSectionAboutProject {
  id: ID!
  title: String!
  description: String!
  image: UploadFile
}

input ComponentPageSectionAboutProjectInput {
  title: String!
  description: String!
  image: ID
}

type ComponentPageSectionAboutUs {
  id: ID!
  title: String!
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author]
}

input ComponentPageSectionAboutUsInput {
  title: String!
  authors: [ID]
}

type ComponentPageSectionAgenda {
  id: ID!
  title: String!
  description: String!
}

input ComponentPageSectionAgendumInput {
  title: String!
  description: String!
}

input ComponentPageSectionConceptInput {
  title: String!
  concepts: [ComponentPageConceptInput]
}

type ComponentPageSectionConcepts {
  id: ID!
  title: String!
  concepts: [ComponentPageConcepts]
}

type ComponentPageSectionFaq {
  id: ID!
  title: String!
  questions: [ComponentPageQuestions]
}

input ComponentPageSectionFaqInput {
  title: String!
  questions: [ComponentPageQuestionInput!]
}

input ComponentPageSectionModuleInput {
  title: String!
  modules: [ComponentPageModuleInput!]
}

type ComponentPageSectionModules {
  id: ID!
  title: String!
  modules: [ComponentPageModules]
}

input ComponentPageSectionReviewInput {
  title: String!
  reviews: [ComponentPageReviewInput!]
}

type ComponentPageSectionReviews {
  id: ID!
  title: String!
  reviews: [ComponentPageReviews]
}

type ComponentPageSectionTech {
  id: ID!
  title: String!
  techIcons: [ComponentPageTechIcons]
}

input ComponentPageSectionTechInput {
  title: String!
  techIcons: [ComponentPageTechIconInput!]
}

input ComponentPageSocialLinkInput {
  title: ENUM_COMPONENTPAGESOCIALLINKS_TITLE
  url: String!
}

type ComponentPageSocialLinks {
  id: ID!
  title: ENUM_COMPONENTPAGESOCIALLINKS_TITLE!
  url: String!
}

input ComponentPageTechIconInput {
  icon: ID
  title: String!
}

type ComponentPageTechIcons {
  id: ID!
  icon: UploadFile
  title: String!
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

type deleteLandingPagePayload {
  landingPage: LandingPage
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAuthorInput {
  photo: ID
  name: String
  role: String
  socialLinks: [editComponentPageSocialLinkInput]
  description: String
  created_by: ID
  updated_by: ID
}

input editComponentPageButtonInput {
  id: ID
  label: String
  url: String
}

input editComponentPageConceptInput {
  id: ID
  title: String
}

input editComponentPageHeaderInput {
  id: ID
  title: String
  description: String
  button: editComponentPageButtonInput
  image: ID
}

input editComponentPageModuleInput {
  id: ID
  title: String
  subtitle: String
  description: String
}

input editComponentPagePricingBoxInput {
  id: ID
  totalPrice: Int
  numberInstallments: Int
  priceInstallment: Int
  benefits: String
  button: editComponentPageButtonInput
}

input editComponentPageQuestionInput {
  id: ID
  question: String
  answer: String
}

input editComponentPageReviewInput {
  id: ID
  name: String
  text: String
  photo: ID
}

input editComponentPageSectionAboutProjectInput {
  id: ID
  title: String
  description: String
  image: ID
}

input editComponentPageSectionAboutUsInput {
  id: ID
  title: String
  authors: [ID]
}

input editComponentPageSectionAgendumInput {
  id: ID
  title: String
  description: String
}

input editComponentPageSectionConceptInput {
  id: ID
  title: String
  concepts: [editComponentPageConceptInput]
}

input editComponentPageSectionFaqInput {
  id: ID
  title: String
  questions: [editComponentPageQuestionInput]
}

input editComponentPageSectionModuleInput {
  id: ID
  title: String
  modules: [editComponentPageModuleInput]
}

input editComponentPageSectionReviewInput {
  id: ID
  title: String
  reviews: [editComponentPageReviewInput]
}

input editComponentPageSectionTechInput {
  id: ID
  title: String
  techIcons: [editComponentPageTechIconInput]
}

input editComponentPageSocialLinkInput {
  id: ID
  title: ENUM_COMPONENTPAGESOCIALLINKS_TITLE
  url: String
}

input editComponentPageTechIconInput {
  id: ID
  icon: ID
  title: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editLandingPageInput {
  logo: ID
  header: editComponentPageHeaderInput
  sectionAboutProject: editComponentPageSectionAboutProjectInput
  sectionTech: editComponentPageSectionTechInput
  sectionConcepts: editComponentPageSectionConceptInput
  sectionModules: editComponentPageSectionModuleInput
  sectionAgenda: editComponentPageSectionAgendumInput
  pricingBox: editComponentPagePricingBoxInput
  sectionAboutUs: editComponentPageSectionAboutUsInput
  sectionReviews: editComponentPageSectionReviewInput
  sectionFaq: editComponentPageSectionFaqInput
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

enum ENUM_COMPONENTPAGESOCIALLINKS_TITLE {
  Github
  Twitter
  Dribbble
  LinkedIn
  Facebook
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LandingPage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  logo: UploadFile
  header: ComponentPageHeader
  sectionAboutProject: ComponentPageSectionAboutProject
  sectionTech: ComponentPageSectionTech
  sectionConcepts: ComponentPageSectionConcepts
  sectionModules: ComponentPageSectionModules
  sectionAgenda: ComponentPageSectionAgenda
  pricingBox: ComponentPagePricingBox
  sectionAboutUs: ComponentPageSectionAboutUs
  sectionReviews: ComponentPageSectionReviews
  sectionFaq: ComponentPageSectionFaq
  created_by: AdminUser
  updated_by: AdminUser
}

input LandingPageInput {
  logo: ID
  header: ComponentPageHeaderInput
  sectionAboutProject: ComponentPageSectionAboutProjectInput
  sectionTech: ComponentPageSectionTechInput
  sectionConcepts: ComponentPageSectionConceptInput
  sectionModules: ComponentPageSectionModuleInput!
  sectionAgenda: ComponentPageSectionAgendumInput
  pricingBox: ComponentPagePricingBoxInput
  sectionAboutUs: ComponentPageSectionAboutUsInput
  sectionReviews: ComponentPageSectionReviewInput
  sectionFaq: ComponentPageSectionFaqInput
  created_by: ID
  updated_by: ID
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Author | AuthorConnection | AuthorAggregator | AuthorGroupBy | AuthorConnectionId | AuthorConnectionCreated_at | AuthorConnectionUpdated_at | AuthorConnectionPhoto | AuthorConnectionName | AuthorConnectionRole | AuthorConnectionDescription | AuthorConnectionCreated_by | AuthorConnectionUpdated_by | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | LandingPage | updateLandingPagePayload | deleteLandingPagePayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload | ComponentPageButton | ComponentPageConcepts | ComponentPageHeader | ComponentPageModules | ComponentPagePricingBox | ComponentPageQuestions | ComponentPageReviews | ComponentPageSectionAboutProject | ComponentPageSectionAboutUs | ComponentPageSectionAgenda | ComponentPageSectionConcepts | ComponentPageSectionFaq | ComponentPageSectionModules | ComponentPageSectionReviews | ComponentPageSectionTech | ComponentPageSocialLinks | ComponentPageTechIcons

type Mutation {
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  updateLandingPage(input: updateLandingPageInput): updateLandingPagePayload
  deleteLandingPage: deleteLandingPagePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Query {
  author(id: ID!): Author
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author]
  authorsConnection(sort: String, limit: Int, start: Int, where: JSON): AuthorConnection
  landingPage: LandingPage
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAuthorInput {
  where: InputID
  data: editAuthorInput
}

type updateAuthorPayload {
  author: Author
}

input updateLandingPageInput {
  data: editLandingPageInput
}

type updateLandingPagePayload {
  landingPage: LandingPage
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}
